// test1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>

using namespace cv;
using namespace std;



int main(int argc, char** argv)
{
	const int Boards = 10;
	Mat image[Boards];
	Mat gray_image;
	Size size(7, 10);

	//vector<Point3f> obj;
	Size board_sz = Size(10, 7);
	int Squares = 70;

	vector<vector<Point3f>> object_points;
	vector<vector<Point2f>> image_points;
	
	Mat corners;
	int successes = 0;
	string frame;
	vector<Point3f> obj;



	Mat intrinsic = Mat(3, 3, CV_32FC1);
	Mat distCoeffs;
	vector<Mat> rvecs;
	vector<Mat> tvecs;
	Mat imageUndistorted;

	intrinsic.ptr<float>(0)[0] = 1200;
	intrinsic.ptr<float>(0)[1] = 0;
	intrinsic.ptr<float>(1)[1] = 1280;
	intrinsic.ptr<float>(1)[0] = 0;
	intrinsic.ptr<float>(1)[2] = float(1023) / float(2);
	intrinsic.ptr<float>(0)[2] = float(1279) / float(2);
	intrinsic.ptr<float>(2)[2] = 1;
	intrinsic.ptr<float>(2)[0] = 0;
	intrinsic.ptr<float>(2)[1] = 0;


	for (int j = 0; j<Squares; j++)
		obj.push_back(Point3f(j / 10, j % 10, 0));

		
		for (int i = 0; i < Boards; i++)
		{
		frame = "img00" + to_string(i + 125) + "_l.bmp";
		image[i] = imread(frame, IMREAD_GRAYSCALE); // Read the file
		
		}

	
		for (int i = 0; i < Boards; i++)
		{
			bool found = false;
			found = findChessboardCorners(image[i], board_sz, corners);

			if (found)
			{
				//findChessboardCorners(image[i], board_sz, corners);
				cornerSubPix(image[i], corners, Size(5, 5), Size(-1, -1), TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 30, 1e-6));
				//drawChessboardCorners(image[i], board_sz, corners, found);
				
				image_points.push_back(corners);
				object_points.push_back(obj);

				cout << i << endl;
				
			}
			
		}
	

		cout<<calibrateCamera(object_points, image_points, image[0].size(), intrinsic, distCoeffs, rvecs, tvecs, 0 , TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 30, 1e-6));
		undistort(image[0], imageUndistorted, intrinsic, distCoeffs);
		

		

	imshow("Display window", image[0]); // Show our image inside it.
	imshow("Display window", imageUndistorted);
	imshow("Display window1", image[0]); // Show our image inside it.
	imshow("Display window1", image[0]);
	
	waitKey(0);
	return 0;
}

