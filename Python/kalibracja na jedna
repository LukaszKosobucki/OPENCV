import glob
import cv2
import numpy as np
import pickle

fname= glob.glob("right\*.bmp")
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0), in this exercise they should be 100,200... etc
objp = np.zeros((6 * 9, 3), np.float32)
objp[:, :2] = np.mgrid[0:9, 0:6].T.reshape(-1, 2)
objp=objp*100
# Arrays to store object points and image points from all the images.
objpoints = []  # 3d point in real world space
imgpoints = []  # 2d points in image plane of right camera
imgpoints2=[] # 2d points in image plane of left camera
przekatna=0
corners2=0
przekatna2=0
corners2OLD=[[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]],[[0,0]]]
cap=cv2.VideoCapture("K2.AVI")
k=0
p=1
while True:
    k+=1
    print(k)
    cv2.namedWindow("kozak", 0)
    cv2.resizeWindow("kozak", 500, 300)
    ret, frame = cap.read()
    if k>1300:
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        RET, corners = cv2.findChessboardCorners(gray,(6,9),)
        cv2.drawChessboardCorners(frame, (6,9), corners, RET)
        cv2.imshow("kozak", frame)
        if RET==True:
            corners= cv2.cornerSubPix(gray, corners, (5,5), (-1, -1), criteria)
            xd=np.absolute(przekatna - (np.sqrt((corners[0][0][0]-corners[-1][0][0])**2)+np.sqrt((corners[0][0][1]-corners[-1][0][1])**2))) #warunek o roznicy dlugosci #1 przekątnej
            xd2=np.absolute(przekatna2 - (np.sqrt((corners[9][0][0]-corners[-10][0][0])**2+(corners[9][0][1]-corners[-10][0][1])**2))) #warunek o roznicy dlugosci #2 przekątnej
            # wartosc 15 dla warunkow jest wartoscia zeminna wg uznania
            if np.absolute(np.sqrt(corners[0][0][0]**2+corners[0][0][1]**2)-np.sqrt(corners2OLD[0][0][0]**2+corners2OLD[0][0][1]**2))>25 or xd>25 or xd2>25:
                imgpoints.append(corners)
                objpoints.append(objp)
                corners2OLD=corners
                przekatna = np.sqrt((corners2OLD[0][0][0] - corners2OLD[-1][0][0]) ** 2) + np.sqrt(
                    (corners2OLD[0][0][1] - corners2OLD[-1][0][1]) ** 2)
                przekatna2 = np.sqrt((corners2OLD[9][0][0] - corners2OLD[-10][0][0]) ** 2 + (
                            corners2OLD[9][0][1] - corners2OLD[-10][0][1]) ** 2)
                p += 1
                print(f"wzialem klatke nr: {k}")
        if RET== False:
            print(f"nie wykrylem na klatce nr: {k}")
    if p>250:
        break

    if cv2.waitKey(5) & 0xFF ==ord('q'):
        break
    # if k==400:
    #     break
cap.release()
cv2.destroyAllWindows()
print(f"wzialem: {p} klatek")

ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, (1924,1082),distCoeffs=None,cameraMatrix=None)
print(ret)
print(mtx)
print(dist)
with open("mtxvideo.pickle","wb") as file:
    pickle.dump(mtx,file)
with open("distvideo.pickle","wb") as file:
    pickle.dump(dist,file)
with open("RETvideo.pickle","wb") as file:
    pickle.dump(ret,file)


