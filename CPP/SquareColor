#include "stdafx.h"
#pragma comment(linker, "/STACK:10000000")
#pragma comment(linker, "/HEAP:10000000")
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <fstream>

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{
	//Zmienne
	int lowerR = 245;
	int lowerG = 86;
	int lowerB = 93;
	int upperR = 255;
	int upperG = 255;
	int upperB = 255;

	int circleR = 124;
	int circleG = 252;
	int circleB = 0;
	namedWindow("Trackbar", WINDOW_FULLSCREEN);
	createTrackbar("Lower R", "Trackbar", &lowerR, 255, NULL);
	createTrackbar("Lower G", "Trackbar", &lowerG, 255, NULL);
	createTrackbar("Lower B", "Trackbar", &lowerB, 255, NULL);
	createTrackbar("Upper R", "Trackbar", &upperR, 255, NULL);
	createTrackbar("Upper G", "Trackbar", &upperG, 255, NULL);
	createTrackbar("Upper B", "Trackbar", &upperB, 255, NULL);
	Mat frame, frame2;
	Mat hsv;
	Mat drone;
	VideoCapture video("Dron Cal 12.55260362.20190821144706.avi");
	video.set(CAP_PROP_FPS, 60.0f);
	Mat lower_orange(217.0f, 97.0f, 54.0f);
	Mat upper_orange(255.05f, 103.0f, 38.0f);
	Mat mask;
	Mat erodeElement = getStructuringElement(MORPH_RECT, Size(3, 3));
	Mat dilateElement = getStructuringElement(MORPH_RECT, Size(8, 8));
	vector< vector<Point> > contours;
	vector< vector<Point> > contours_temp;
	vector<Vec4i> hierarchy;
	Mat croppedImage;
	Rect objectBoundingRectangle = Rect(0, 0, 0, 0);
	bool objectFound = false;
	int iter = 0;
	int theObject[2] = { 0, 0 };


	while (1)
	{
		video.read(frame);
		if (frame.empty())
			break;
		if (iter == 0) {
			cvtColor(frame, hsv, COLOR_RGB2HSV);
			inRange(hsv, Scalar(lowerB, lowerG, lowerR), Scalar(upperB, upperG, upperR), mask);
			erode(mask, mask, erodeElement);
			erode(mask, mask, erodeElement);
			dilate(mask, mask, dilateElement);
			dilate(mask, mask, dilateElement);

			findContours(mask, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
				bitwise_and(frame, frame, drone, mask);
				if (contours.empty());
				else {
					croppedImage = frame(Rect(contours.at(0).at(0).x-50, contours.at(0).at(0).y-50, 200, 100));
				}
			iter++;
		}
		else {

			cvtColor(croppedImage, hsv, COLOR_RGB2HSV);
			inRange(hsv, Scalar(lowerB, lowerG, lowerR), Scalar(upperB, upperG, upperR), mask);
			erode(mask, mask, erodeElement);
			erode(mask, mask, erodeElement);
			dilate(mask, mask, dilateElement);
			dilate(mask, mask, dilateElement);

			findContours(mask, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
			bitwise_and(croppedImage, croppedImage, drone, mask);
			if (contours.empty()) {
				cvtColor(frame, hsv, COLOR_RGB2HSV);
				inRange(hsv, Scalar(lowerB, lowerG, lowerR), Scalar(upperB, upperG, upperR), mask);
				erode(mask, mask, erodeElement);
				erode(mask, mask, erodeElement);
				dilate(mask, mask, dilateElement);
				dilate(mask, mask, dilateElement);

				findContours(mask, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);
				bitwise_and(frame, frame, drone, mask);
				if (contours.empty());
				else {
					croppedImage = frame(Rect(contours.at(0).at(0).x - 50, contours.at(0).at(0).y - 50, 200, 100));
				}
			}
				
		}
		if (contours.empty())
		{
			;
		}
		else
		{
			switch (contours.size())
			{
			case 1:
				circle(croppedImage, Point(contours.at(0).at(0).x + 5, contours.at(0).at(0).y + 5), 5, Scalar(circleR, circleG, circleB), 2);
			case 2:
				circle(croppedImage, Point(contours.at(0).at(0).x + 5, contours.at(0).at(0).y + 5), 5, Scalar(circleR, circleG, circleB), 2);
				circle(croppedImage, Point(contours.back().at(0).x + 5, contours.back().at(0).y + 5), 5, Scalar(circleR, circleG, circleB), 2);
			}
				//contours_temp = contours;
			//rectangle(frame, Point(contours[0][0].x - 120, contours[0][0].y - 40), Point(contours[0][0].x + 40, contours[0][0].y + 25), Scalar(150, 100, 50), 2);
			//putText(frame, "DRONIK", Point(contours[0][0].x - 90, contours[0][0].y - 50), 1, 2, Scalar(150, 100, 50), 2);
		}
		//imshow("drone", drone);
		//imshow("disp2", hsv);
		//imshow("disp3", mask);
		imshow("disp", croppedImage);
		imshow("frame", frame);
		contours.clear();
		iter++;
		char c = char(waitKey(1));
		if (c == 27)
			break;




	}

	waitKey(1); // Wait for a keystroke in the window
	return 0;
}
