#include "stdafx.h"
#include <opencv2/highgui/highgui.hpp> 
#include "opencv2/imgproc/imgproc.hpp" 
#include <string> 
#include <iostream> 

using namespace cv;
using namespace std;

int main()
{
	VideoCapture capture("1.avi");
	string window_name[] = { "Kamera", "Contour", "Binary" };
	Mat frame, img, rgb, binary;

	//*** 
	Mat cont;
	//*** 

	
	for (int i = 0; i < 3; i++) namedWindow(window_name[i], WINDOW_AUTOSIZE);
	int lowerR = 150;
	int lowerG = 86;
	int lowerB = 93;
	int upperR = 255;
	int upperG = 255;
	int upperB = 255;
	namedWindow("Trackbar", WINDOW_FULLSCREEN);
	createTrackbar("Lower R", "Trackbar", &lowerR, 255, NULL);
	createTrackbar("Lower G", "Trackbar", &lowerG, 255, NULL);
	createTrackbar("Lower B", "Trackbar", &lowerB, 255, NULL);
	createTrackbar("Upper R", "Trackbar", &upperR, 255, NULL);
	createTrackbar("Upper G", "Trackbar", &upperG, 255, NULL);
	createTrackbar("Upper B", "Trackbar", &upperB, 255, NULL);
	while (waitKey(20) != 27)
	{
		capture >> frame;
		frame.copyTo(img);
		cvtColor(img, rgb, COLOR_RGB2HSV);
		//split(rgb_img, rgb_split);
		inRange(rgb, Scalar(lowerB, lowerG, lowerR), Scalar(upperB, upperG, upperR), binary);
		blur(binary, binary, cv::Size(3, 3));
		erode(binary, binary, cv::Mat());

		//*** 
		vector<vector<Point> > contours;
		vector<Point> contours_poly;
		Rect boundRect;
		binary.copyTo(cont);
		findContours(cont, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE, Point(0, 0));
		int max = 0, i_cont = -1;
		Mat drawing = Mat::zeros(cont.size(), CV_8UC3);
		for (int i = 0; i< contours.size(); i++)
		{
			if (abs(contourArea(Mat(contours[i]))) > max)
			{
				max = abs(contourArea(Mat(contours[i])));
				i_cont = i;
			}
		}
		if (i_cont >= 0)
		{
			approxPolyDP(Mat(contours[i_cont]), contours_poly, 3, true);
			boundRect = boundingRect(Mat(contours_poly));
			fillConvexPoly(img, contours_poly, contours_poly.size());
			rectangle(img, boundRect.tl(), boundRect.br(), Scalar(125, 250, 125), 2, 8, 0);
			line(img, boundRect.tl(), boundRect.br(), Scalar(250, 125, 125), 2, 8, 0);
			line(img, Point(boundRect.x + boundRect.width, boundRect.y), Point(boundRect.x, boundRect.y + boundRect.height), Scalar(250, 125, 125), 2, 8, 0);
			string s;
			stringstream out;
			out << boundRect.x + boundRect.width / 2 << "x" << boundRect.y + boundRect.height / 2;
			s = out.str();
			putText(img, s, Point(50, 50), FONT_HERSHEY_COMPLEX, 1, Scalar(20, 40, 80), 3, 8);
			drawContours(drawing, contours, i_cont, Scalar(125, 125, 250), 2);
		}
		imshow(window_name[1], drawing);
		//*** 

		imshow(window_name[0], img);
		imshow(window_name[2], binary);
	}
	capture.release();
	return 0;
}
